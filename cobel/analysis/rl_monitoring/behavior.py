# basic imports
import numpy as np
# framework imports
from cobel.analysis.rl_monitoring.rl_monitor import AbstractMonitor


class PredictionMonitor(AbstractMonitor):
    
    def __init__(self):
        '''
        Prediction monitor. Used for tracking predictions made by an RL agent.
        
        Parameters
        ----------
        None
        
        Returns
        ----------
        None
        '''
        super().__init__(None, False)
        #define the variables that will be monitored
        self.prediction_trace = np.array([], dtype='float')
    
    def update(self, logs: dict):
        '''
        This function is called when a step ends. Here, information about the monitored variables is memorized.
        
        Parameters
        ----------
        logs :                              Information from the reinforcement learning subsystem.
        
        Returns
        ----------
        None
        '''
        # update the prediction traces
        self.prediction_trace = np.append(self.prediction_trace, np.array([logs['action']]))
        
    def get_trace(self):
        '''
        This function returns the prediction trace.
        
        Parameters
        ----------
        None
        
        Returns
        ----------
        trace :                             The prediction trace.
        '''       
        return self.prediction_trace
        
    def clear_plots(self):
        '''
        This function clears the plots generated by the monitor.
        
        Parameters
        ----------
        None
        
        Returns
        ----------
        None
        '''
        pass


class PredictionErrorMonitor(AbstractMonitor):
    
    def __init__(self):
        '''
        Prediction monitor. Used for tracking predictions made by an RL agent.
        
        Parameters
        ----------
        None
        
        Returns
        ----------
        None
        '''
        super().__init__(None, False)
        #define the variables that will be monitored
        self.prediction_error_trace = np.array([], dtype='float')
    
    def update(self, logs: dict):
        '''
        This function is called when a step ends. Here, information about the monitored variables is memorized.
        
        Parameters
        ----------
        logs :                              Information from the reinforcement learning subsystem.
        
        Returns
        ----------
        None
        '''
        # update the prediction traces
        self.prediction_error_trace = np.append(self.prediction_error_trace, np.array([logs['action'] - logs['reward']]))
        
    def get_trace(self):
        '''
        This function returns the prediction error trace.
        
        Parameters
        ----------
        None
        
        Returns
        ----------
        trace :                             The prediction error trace.
        '''       
        return self.prediction_error_trace
        
    def clear_plots(self):
        '''
        This function clears the plots generated by the monitor.
        
        Parameters
        ----------
        None
        
        Returns
        ----------
        None
        '''
        pass
